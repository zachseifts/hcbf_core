<?php
/**
 * @file
 * Code for the HCBF Festival feature.
 */

include_once 'hcbf_festival.features.inc';

/**
 Implements hook_theme();
 */
function hcbf_festival_theme() {
  $themes = array();

  $themes['hcbf_festival_tickets'] = array(
    'variables' => array(
      'wrapper_classes' => NULL,
    ),
    'template' => 'templates/hcbf_festival_tickets',
  );

  $themes['hcbf_festival_volunteer'] = array(
    'variables' => array(
      'wrapper_classes' => NULL,
    ),
    'template' => 'templates/hcbf_festival_volunteer',
  );

  return $themes;
}

/**
 * Gets current festival entity.
 *
 * Note: The results are cached in the default drupal cache.
 */
function hcbf_festival_current() {
  $key = __FUNCTION__;
  $festival_data = &drupal_static($key);

  $event = array();
  if (!isset($festival_data)) {
    if ($cache = cache_get($key)) {
      $event = $cache->data;
    }
    else {
      $current_festival = variable_get('hcbf_current_festival', 0);
      if ($current_festival != 0) {
        // Get the festival entity and add it to the event array.
        $festival = entity_metadata_wrapper('node', $current_festival);
        $event['entity'] = $festival;

        // Add the year to the event array.
        $event['year'] = $festival->label();

        // Format the date of the event.
        $start = $festival->field_hcbf_festival_date->value->value();
        $start_date = format_date($start, 'custom', 'F j, Y g:ia');
        $end = $festival->field_hcbf_festival_date->value2->value();
        $end_time = format_date($end, 'custom', 'g:ia');
        $event['date'] = $start_date . ' - ' . $end_time;

        // Add the status of ticket sales.
        $event['tickets_on_sale'] = variable_get('hcbf_core_on_sale', 0);

        cache_set($key, $event);
      }
    }
  }

  return $event;
}
