<?php
/**
 * @file
 * Code for the HCBF Breweries feature.
 */

include_once 'hcbf_breweries.features.inc';

/**
 * Implements hook_permission()
 */
function hcbf_breweries_permission() {
  $permissions = array();

  $permissions['manage breweries'] = array(
    'title' => t('Manage breweries')
  );

  $permissions['access breweries'] = array(
    'title' => t('Access breweries')
  );

  $permissions['access breweries registration'] = array(
    'title' => t('Access breweries registration')
  );

  return $permissions;
}

/**
 * Implements hook_menu()
 */
function hcbf_breweries_menu() {
  $items = array();

  $items['admin/config/hcbf/breweries'] = array(
    'title' => 'Breweries',
    'description' => 'Configuration for the High Country Beer Fest breweries functionality.',
    'page callback' => 'hcbf_breweries_manage',
    'access arguments' => array('manage breweries'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'hcbf_breweries.admin.inc',
  );

  $items['breweries'] = array(
    'title' => 'Breweries',
    'page callback' => 'hcbf_breweries',
    'access arguments' => array('access content'),
    'file' => 'hcbf_breweries.pages.inc'
  );

  $items['archive/%/breweries'] = array(
    'title' => 'Breweries archive',
    'page callback' => 'hcbf_breweries_archive',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
    'file' => 'hcbf_breweries.pages.inc'
  );

  return $items;
}

/**
 * Implements hook_theme()
 */
function hcbf_breweries_theme() {
  $themes = array();

  $themes['hcbf_breweries'] = array(
    'variables' => array('breweries' => NULL),
    'template' => 'templates/hcbf_breweries',
  );

  $themes['hcbf_breweries_registration'] = array(
    'variables' => array(),
    'template' => 'templates/hcbf_breweries_registration',
  );

  $themes['hcbf_breweries_manage'] = array(
    'variables' => array(
      'all_breweries' => NULL,
      'breweries' => NULL,
    ),
    'template' => 'templates/hcbf_breweries_manage',
  );

  return $themes;
}

/**
 * Implements hook_mail()
 */
function hcbf_breweries_mail($key, &$message, $params) {
  global $user;

  $options = array(
    'langcode' => $message['language']->language,
  );

  switch ($key) {
    case 'breweries_message':
      $message['subject'] = t('[@site-name breweries Form]', array('@site-name' => variable_get('site_name', 'Drupal')), $options);
      $message['body'][] = t('@name has signed up for the festival!',
        array(
          '@name' => check_plain($params['brewery_name']),
        ),
      $options);
      break;
  }
}

/**
 * Implements a function that sends the mail
 */
function hcbf_breweries_send_mail($form_values) {
  $module = 'hcbf_breweries';
  $key = 'breweries_message';
  $to = 'breweries@hcbeerfest.com';
  $from = 'noreply@hcbeerfest.com';
  $params = $form_values;
  $language = language_default();
  $send = TRUE;
  $result = drupal_mail($module, $key, $to, $language, $params, $from, $send);
  if ($result['result'] != TRUE) {
    drupal_set_message(t('There was a problem sending your message and it was not sent, but you are in the system. If we do not contact you, use the contact form on this site to contact us.'), 'error');
  }
}

/**
 * Implements hook_entity_update()
 */
function hcbf_breweries_entity_update($entity, $type) {
  if (isset($entity->type)) {
    if ($entity->type == 'hcbf_brewery') {
      cache_clear_all('hcbf_breweries_current', 'cache', TRUE);
      drupal_set_message(t('Cleared brewery cache.'));
    }
  }
}

/**
 * Gets all of the festival breweries.
 */
function hcbf_breweries_all() {
  $key = __FUNCTION__;
  $brewery_data = &drupal_static(__FUNCTION__);

  $breweries = array();
  if (!isset($brewery_data)) {
    if ($cache = cache_get($key)) {
      $breweries = $cache->data;
    }
    else {
      $brewery_query = new EntityFieldQuery();
      $brewery_query->entityCondition('entity_type', 'node')
        ->entityCondition('bundle', 'hcbf_brewery')
        ->propertyCondition('status', 1)
        ->propertyOrderBy('title', 'ASC');
      $brewery_result = $brewery_query->execute();

      if (!empty($brewery_result)) {
        $brewery_nids = array_keys($brewery_result['node']);

        foreach ($brewery_nids as $brewery_nid) {
          $brewery_entity = entity_metadata_wrapper('node', $brewery_nid);

          $link = l($brewery_entity->label(),
                    $brewery_entity->field_hcbf_brewery_brewery_url->value(),
                    array(
                      'attributes' => array(
                        'data-ga-event' => array(),
                        'data-ga-category' => array('brewery_link_click'),
                        'data-ga-label' => 'breweries',
                        'data-ga-action' => $brewery_entity->label(),
                    )));

          $breweries[] = array(
            'name' => $brewery_entity->label(),
            'nid' => $brewery_entity->nid->value(),
            'location' => $brewery_entity->field_hcbf_brewery_brewery_city->value() . ', ' . $brewery_entity->field_hcbf_brewery_brewery_state->value(),
            'link' => $link,
            'logo' => '<img src=' . image_style_url('medium', $brewery_entity->field_hcbf_brewery_logo->value()['uri']) . ' class="img-responsive center-block" />',
          );
        }
      }
      
      cache_set($key, $breweries);
    }
  }
  return $breweries;
}

/**
 * Gets the current festival breweries.
 */
function hcbf_breweries_current($festival_nid=NULL) {
  $key = __FUNCTION__;

  $current_festival = variable_get('hcbf_current_festival', 0);

  // If a $festival_nid is passed, it should use that as the current year
  // and set the cache_key accordingly.
  if (!is_null($festival_nid) && is_int($festival_nid)) {
    $key .= '_' . $festival_nid;
    $current_festival = $festival_nid;
  }

  $brewery_data = &drupal_static(__FUNCTION__);

  $breweries = array();
  if (!isset($brewery_data)) {
    if ($cache = cache_get($key)) {
      $breweries = $cache->data;
    }
    else {
      if ($current_festival != 0) {
        $brewery_query = new EntityFieldQuery();
        $brewery_query->entityCondition('entity_type', 'node')
          ->entityCondition('bundle', 'hcbf_brewery')
          ->propertyCondition('status', 1)
          ->fieldCondition('field_hcbf_brewery_festival', 'target_id', $current_festival, '=')
          ->propertyOrderBy('title', 'ASC');
        $brewery_result = $brewery_query->execute();

        if (!empty($brewery_result)) {
          $brewery_nids = array_keys($brewery_result['node']);

          foreach ($brewery_nids as $brewery_nid) {
            $brewery_entity = entity_metadata_wrapper('node', $brewery_nid);

            $link = l($brewery_entity->label(),
                      $brewery_entity->field_hcbf_brewery_brewery_url->value(),
                      array(
                        'attributes' => array(
                          'data-ga-event' => array(),
                          'data-ga-category' => array('brewery_link_click'),
                          'data-ga-label' => 'breweries',
                          'data-ga-action' => $brewery_entity->label(),
                      )));

            $breweries[] = array(
              'name' => $brewery_entity->label(),
              'nid' => $brewery_entity->nid->value(),
              'location' => $brewery_entity->field_hcbf_brewery_brewery_city->value() . ', ' . $brewery_entity->field_hcbf_brewery_brewery_state->value(),
              'link' => $link,
              'logo' => '<img src="' . image_style_url('medium', $brewery_entity->field_hcbf_brewery_logo->value()['uri']) . '" class="img-responsive center-block" />',
            );
          }
        }
      }
      cache_set($key, $breweries);
    }
  }
  return $breweries;
}

/**
 * Returns a N number list of breweries for the current year's event.
 */
function hcbf_breweries_random($number = 5) {
  $breweries = hcbf_breweries_current();
  shuffle($breweries);
  return array_slice($breweries, 0, $number);
}
